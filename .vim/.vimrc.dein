" Let dein manage dein
call dein#add(expand('~/.vim/dein/'))
if !has('nvim')
  call dein#add('roxma/nvim-yarp')
  call dein#add('roxma/vim-hug-neovim-rpc')
endif

nnoremap <silent><C-e> :NERDTreeToggle<CR>

" 連続で行うような操作をサブモジュールとして登録できるPlugin
call dein#add('kana/vim-submode')

" 様々なデータを共通のインタフェースを用いて操作できるPlugin
call dein#add('Shougo/unite.vim')
" unite {{{
let g:unite_enable_start_insert=1
nmap <silent> <C-u><C-b> :<C-u>Unite buffer<CR>
nmap <silent> <C-u><C-f> :<C-u>UniteWithBufferDir -buffer-name=files file<CR>
nmap <silent> <C-u><C-r> :<C-u>Unite -buffer-name=register register<CR>
nmap <silent> <C-u><C-m> :<C-u>Unite file_mru<CR>
nmap <silent> <C-u><C-u> :<C-u>Unite buffer file_mru<CR>
nmap <silent> <C-u><C-a> :<C-u>UniteWithBufferDir -buffer-name=files buffer file_mru bookmark file<CR>
au FileType unite nmap <silent> <buffer> <expr> <C-j> unite#do_action('split')
au FileType unite imap <silent> <buffer> <expr> <C-j> unite#do_action('split')
au FileType unite nmap <silent> <buffer> <expr> <C-l> unite#do_action('vsplit')
au FileType unite imap <silent> <buffer> <expr> <C-l> unite#do_action('vsplit')
au FileType unite nmap <silent> <buffer> <ESC><ESC> q
au FileType unite imap <silent> <buffer> <ESC><ESC> <ESC>q
" }}}

call dein#add('Shougo/neomru.vim', {'depends' : 'Shougo/unite.vim'})

" colorscheme集
call dein#add('flazz/vim-colorschemes')

" 非同期処理を実施するために必要なvim用のplugin(環境ごとに自動build)
call dein#add('Shougo/vimproc', {
          \ 'build' : {
          \     'windows' : 'make -f make_mingw32.mak',
          \     'cygwin' : 'make -f make_cygwin.mak',
          \     'mac' : 'make -f make_mac.mak',
          \     'unix' : 'make -f make_unix.mak',
          \    },
          \ })
" ファイルを検索して開くためのplugin
call dein#add('ctrlpvim/ctrlp.vim')

" vim内でshellを動作させるplugin
call dein#add('Shougo/vimshell')

" vim上でgit操作するplugin
call dein#add('tpope/vim-fugitive')
call dein#add('gregsexton/gitv.git')
if has("lua")
  " 入力補完plugin
  call dein#add('Shougo/neocomplete', { 'autoload' : {
       \ 'depends' : 'Shougo/vimproc',
       \   'insert' : 1,
       \ }})
endif

let g:rsenseUseOmniFunc = 1

let g:acp_enableAtStartup = 0
let g:neocomplete#enable_at_startup = 1
let g:neocomplete#enable_smart_case = 1

" 言語用のsnippet plugin
call dein#add('Shougo/neosnippet.vim')
call dein#add('Shougo/neosnippet-snippets')
call dein#add('honza/vim-snippets')
" Enable snipMate compatibility feature.
let g:neosnippet#enable_snipmate_compatibility = 1"
"  " Tell Neosnippet about the other snippets
let g:neosnippet#snippets_directory='~/.vim/bundle/vim-snippets/snippets'

" uniteでtagsを読み込みます
call dein#add('tsukkee/unite-tag', {
      \ 'depends' : ['Shougo/unite.vim'],
      \ 'autoload' : {
      \   'unite_sources' : ['tag', 'tag/file', 'tag/include']
      \ }})

" ファイルの構文エラーなどを表示するPlugin
" この場合はjs,rubyをsave時に動作させてます。
call dein#add('scrooloose/syntastic')
let g:syntastic_check_on_open=0 "ファイルを開いたときはチェックしない
let g:syntastic_check_on_save=1 "保存時にはチェック
let g:syntastic_check_on_wq = 0 " wqではチェックしない
let g:syntastic_auto_loc_list=1 "エラーがあったら自動でロケーションリストを開く
let g:syntastic_loc_list_height=6 "エラー表示ウィンドウの高さ
set statusline+=%#warningmsg# "エラーメッセージの書式
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
let g:syntastic_javascript_checkers = ['eslint'] "ESLintを使う
let g:syntastic_ruby_checkers = ['rubocop']
let g:syntastic_mode_map = {
      \ 'mode': 'active',
      \ 'active_filetypes': ['javascript', 'ruby'],
      \ 'passive_filetypes': []
      \ }

" html,css用
call dein#add('hail2u/vim-css3-syntax')
" call dein#add('taichouchou2/html5.vim')
call dein#add('othree/html5.vim')

" zencoding-vimの後継
call dein#add('mattn/emmet-vim')
" "html展開した時のlangをjaに
let g:user_emmet_settings = {
\ 'lang' : 'ja'
\}

" wordを決まったwordに変換するPlugin
call dein#add('AndrewRadev/switch.vim')

" vimからagを利用できるようにするPlugin
call dein#add('rking/ag.vim')

" ディレクトリ構造をtree表示するPlugin
call dein#add('scrooloose/nerdtree')
" autocmd VimEnter * execute 'NERDTree'
" F2でtree表示/非表示にする
nnoremap <f2> :NERDTreeToggle<CR>
""tree表示だけの場合は一緒に閉じる
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif
" 不可視ファイルをデファルトで表示
let NERDTreeShowHidden = 1
" タグリストを表示するPlugin
call dein#add("majutsushi/tagbar", {
      \ "autoload": { "commands": ["TagbarToggle"] }})
let g:tlist_js_settings = 'javascript;f:function;v:variable'
if ! empty(dein#get("tagbar"))
  nmap <F8> :TagbarToggle<CR>
endif

" 日付をインクリメントしたら、数値をまとめてインクリメントしたりするPlugin
call dein#add('tpope/vim-speeddating')

" vimからDBを扱うPlugin
call dein#add('vim-scripts/dbext.vim')

" JSDocを生成(<C-l>)
call dein#add('heavenshell/vim-jsdoc' , {'autoload': {'filetypes': ['javascript']}})

" Ruby 用

" refを参照できるようにするPlugin
call dein#add('yuku-t/vim-ref-ri', {
      \ 'depends': ['Shougo/unite.vim', 'thinca/vim-ref'],
      \ 'autoload': { 'filetypes': ['ruby', 'eruby', 'haml'] } })

" endを自動補完するplugin
call dein#add('alpaca-tc/vim-endwise.git', {
      \ 'autoload' : {
      \   'insert' : 1,
      \ }})

" ファイルの構文エラーなどを表示するPlugin
" この場合はRubyをsave時にrubocopを動作させてます。
"call dein#add('scrooloose/syntastic')
"let g:syntastic_mode_map = { 'mode': 'passive',
"            \ 'active_filetypes': ['ruby'] }
"let g:syntastic_ruby_checkers = ['rubocop']

" railsのファイル移動をコマンド移動するplugin
call dein#add('tpope/vim-rails', { 'autoload' : {
      \ 'filetypes' : ['haml', 'ruby', 'eruby'] }})

" railsのファイル種類ごとに一覧を表示する
call dein#add('basyura/unite-rails', {
      \ 'depends' : 'Shougo/unite.vim',
      \ 'autoload' : {
      \   'unite_sources' : [
      \     'rails/bundle', 'rails/bundled_gem', 'rails/config',
      \     'rails/controller', 'rails/db', 'rails/destroy', 'rails/features',
      \     'rails/gem', 'rails/gemfile', 'rails/generate', 'rails/git', 'rails/helper',
      \     'rails/heroku', 'rails/initializer', 'rails/javascript', 'rails/lib', 'rails/log',
      \     'rails/mailer', 'rails/model', 'rails/rake', 'rails/route', 'rails/schema', 'rails/spec',
      \     'rails/stylesheet', 'rails/view'
      \   ]
      \ }})

call dein#add('michaeljsmith/vim-indent-object')

call dein#add('thinca/vim-visualstar')

call dein#add('thinca/vim-quickrun')
let g:quickrun_config = {'*': {'hook/time/enable': '1'},}

call dein#add('fatih/vim-go', { 'do': ':GoInstallBinaries' })
call dein#add('AndrewRadev/splitjoin.vim')
call dein#add('SirVer/ultisnips')
